// Code generated by protoc-gen-go. DO NOT EDIT.
// source: authed.proto

package authed

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Msg struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b72529bf99fbbf8c, []int{0}
}

func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Msg)(nil), "authed.Msg")
}

func init() { proto.RegisterFile("authed.proto", fileDescriptor_b72529bf99fbbf8c) }

var fileDescriptor_b72529bf99fbbf8c = []byte{
	// 94 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2c, 0x2d, 0xc9,
	0x48, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xc4, 0xb9, 0x98,
	0x7d, 0x8b, 0xd3, 0x85, 0x04, 0xb8, 0x98, 0x73, 0x8b, 0xd3, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0x40, 0x4c, 0x23, 0x2d, 0x2e, 0xa8, 0x12, 0x21, 0x05, 0x2e, 0x16, 0xd7, 0xe4, 0x8c, 0x7c,
	0x21, 0x6e, 0x3d, 0xa8, 0x09, 0xbe, 0xc5, 0xe9, 0x52, 0xc8, 0x9c, 0x24, 0x36, 0xb0, 0x99, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x6c, 0xcd, 0x3a, 0x63, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthedClient is the client API for Authed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthedClient interface {
	Echo(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
}

type authedClient struct {
	cc *grpc.ClientConn
}

func NewAuthedClient(cc *grpc.ClientConn) AuthedClient {
	return &authedClient{cc}
}

func (c *authedClient) Echo(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/authed.authed/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthedServer is the server API for Authed service.
type AuthedServer interface {
	Echo(context.Context, *Msg) (*Msg, error)
}

// UnimplementedAuthedServer can be embedded to have forward compatible implementations.
type UnimplementedAuthedServer struct {
}

func (*UnimplementedAuthedServer) Echo(ctx context.Context, req *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

func RegisterAuthedServer(s *grpc.Server, srv AuthedServer) {
	s.RegisterService(&_Authed_serviceDesc, srv)
}

func _Authed_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthedServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authed.authed/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthedServer).Echo(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "authed.authed",
	HandlerType: (*AuthedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Authed_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authed.proto",
}
